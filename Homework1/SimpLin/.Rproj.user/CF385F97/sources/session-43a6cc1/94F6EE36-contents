---
title: "ppmSuite Introduction"
author: "Karissa Palmer"
date: "`r Sys.Date()`"
header_includes: 
  - \usepackage{amsmath}
  - \usepackage{bm}
  - \usepackage{amssymb}
output: rmarkdown::html_vignette
vignette: >
  %\VignetteIndexEntry{ppmSuite Introduction}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---

```{r setup, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>"
)
```

Vignettes are long form documentation commonly included in packages. Because they are part of the distribution of the package, they need to be as compact as possible. The `html_vignette` output type provides a custom style sheet (and tweaks some options) to ensure that the resulting html is as small as possible. The `html_vignette` format:

- Never uses retina figures
- Has a smaller default figure size
- Uses a custom CSS stylesheet instead of the default Twitter Bootstrap style

## Vignette Info

Note the various macros within the `vignette` section of the metadata block above. These are required in order to instruct R how to build the vignette. Note that you should change the `title` field and the `\VignetteIndexEntry` to match the title of your vignette.

## Styles

The `html_vignette` template includes a basic CSS theme. To override this theme you can specify your own CSS in the document metadata as follows:

    output: 
      rmarkdown::html_vignette:
        css: mystyles.css

## Figures

The figure sizes have been customised so that you can easily put two images side-by-side. 

```{r, fig.show='hold'}
plot(1:10)
plot(10:1)
```

You can enable figure captions by `fig_caption: yes` in YAML:

    output:
      rmarkdown::html_vignette:
        fig_caption: yes

Then you can use the chunk option `fig.cap = "Your figure caption."` in **knitr**.

## More Examples

You can write math expressions, e.g. $Y = X\beta + \epsilon$, footnotes^[A footnote here.], and tables, e.g. using `knitr::kable()`.

```{r, echo=FALSE, results='asis'}
knitr::kable(head(mtcars, 10))
```

Also a quote using `>`:

> "He who gives up [code] safety for [code] speed deserves neither."
([via](https://twitter.com/hadleywickham/status/504368538874703872))

## Overview

The primary focus of \texttt{ppmSuite} is creating a variety of product partition model (PPM) priors for different model contexts. Model types include

- Hierarchical Gaussian and probit ordinal models.
- Gaussian likelihood spatial models.
- Multivariate change point models.
- Univariate or bivariate functional data model to cluster curves based on B-spline coefficients.



As a note about what a product partition model is, let $\mathbf{y} = (\mathbf{y}_1,...,\mathbf{y}_n)$ be the set of observations. The goal of a PPM is to model the partitioning of the $\mathbf{y}_i$, $i=1,...,n$ into $k_n$ groups. Let $\rho_n = \{S_1,...,S_{k_n}\}$ denote a partition of the $n$ observations into $k_n$ subsets such that $i \in S_h$ implies observation $i$ is in cluster $h$. The PPM prior for $\rho$ is then proportional to a product of cohesion functions (decided by the user) which measures how likely elements of $S_h$ are clustered \textit{a priori}. 


The package also includes a few data sets that will be used in the examples that follow. 

## Spatial Product Partition Model

Spatial PPMs have spatial locations as their observations and this function utilizes a Gaussian likelihood. The specific model details for the spatial PPM are as follows.

\begin{align*}
y_i|\mu^\ast,\sigma^{2\ast},c_i & \sim N(\mu_{c_i}^\ast,\sigma_{c_i}^{2\ast}),i=1,...,n \\
\mu_{j}^\ast | \mu_0,\sigma^2_0 & \sim N(\mu_0,\sigma_0^2) \\
\sigma_j^\ast|A & \sim UN(0,ms) \\
\rho | M, \xi & \sim sPPM
\end{align*}
Two hyperpriors are assumed, below.
\begin{align*}
\mu_0 |m,s^2 & \sim N(m0, s0^2) \\
\sigma_0 | B & \sim UN(0,ms0)
\end{align*}

As an example, we create a sPPM for the location of scallop catches off the coasts of Long Island and New Jersey.

```{r, echo = FALSE, results = 'hide'}
library(ppmSuite)
```

```{r, results = 'hide', eval = FALSE}
data(scallops)

Y<- log(scallops[,5]+1) #tcatch
s_coords<- scallops[,3:4] #lat and long
m<- dim(s_coords)[1]

#It is helpful to standardize the coordinates
smn <- apply(s_coords,2,mean)
ssd <- apply(s_coords,2,sd)
s_std <- t((t(s_coords) - smn)/ssd)
# Create a grid of prediction locations
np <- 10
sp <- expand.grid(seq(min(s_coords[,1]), max(s_coords[,1]),length=np),
                   seq(min(s_coords[,2]), max(s_coords[,2]), length=np))
sp_std <- t((t(sp) - smn)/ssd) # standardized prediction spatial coordinates
niter <- 20000
nburn <- 10000
nthin <- 10
nout <- (niter - nburn)/nthin

#Create the model
out <- sppm(y=Y,s=s_std,s.pred=sp_std,cohesion=4, M=1, draws=niter, burn=nburn, thin=nthin)

```

The output from sppm is a list that includes the MCMC iterates for each model parameter, the posterior predictive and fitted values, and the LPML (log pseudo marginal likelihood) model fit metric. 

## Gaussian PPMx (General)

This PPM function is able to fit either a Gaussian PPM or PPMx. When a PPMx is referenced, this indicates the inclusion of covariates in the model. The development of the PPMx is in the paper "A Product Partition Model With Regression on Covariates" and alters the original prior distribution of $\rho$ to include a similarity function to aid in the inclusion of covariates. Now,

\begin{align*}
P(\rho_n | x^n) \propto \prod_{j=1}^{k_n} g(x_j^\ast)C(S_j)
\end{align*}


## Gaussian PPM for Functional Realizations

\texttt{curve_ppmx} is the function 


